{"version":3,"sources":["BHLogo.jsx","App.js","serviceWorker.js","index.js"],"names":["BHLogo","_ref","className","stroke","react_default","a","createElement","width","height","viewBox","id","stroke-width","fill","fill-rule","stroke-linecap","d","defaultProps","undefined","App","src_BHLogo","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAGA,SAASA,EAATC,GAAuC,IAArBC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,OAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,QAAQC,OAAO,QAAQC,QAAQ,cAAcP,UAAWA,GAC/DE,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,+DACAF,EAAAC,EAAAC,cAAA,KAAGI,GAAG,YAAYP,OAAO,OAAOQ,eAAa,IAAIC,KAAK,OAAOC,YAAU,UAAUC,iBAAe,SAC5FV,EAAAC,EAAAC,cAAA,QAAMS,EAAE,+IAA+IL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OAChMP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,wJAAwJL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OACzMP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,wJAAwJL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OACzMP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,mSAAmSL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OACpVP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,gWAAgWL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OACjZP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,sCAAsCL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OACvFP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,iCAAiCL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,OAClFP,EAAAC,EAAAC,cAAA,QAAMS,EAAE,iCAAiCL,GAAG,SAASP,OAAQA,EAAQQ,eAAa,SAW9FX,EAAOgB,aAAe,CACpBd,eAAWe,EACXd,OAAQ,WAGKH,cCNAkB,MAtBf,WACE,OACEd,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,OACbE,EAAAC,EAAAC,cAAA,UAAQJ,UAAU,cAChBE,EAAAC,EAAAC,cAACa,EAAD,CAAQjB,UAAU,aAClBE,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,2EAAkEF,EAAAC,EAAAC,cAAA,KAClEJ,UAAU,WACVkB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJ8D,SAAlE,QAIwClB,EAAAC,EAAAC,cAAA,WAJxC,iDAK8CF,EAAAC,EAAAC,cAAA,KAC9CJ,UAAU,WACVkB,KAAK,kEACLC,OAAO,SACPC,IAAI,uBAJ0C,iBAL9C,SCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e188f405.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction BHLogo({ className, stroke }) {\n  return (\n    <svg width=\"700px\" height=\"700px\" viewBox=\"0 0 700 700\" className={className}>\n        <title>Signature</title>\n        <desc>A signature I created while working at Merrill.</desc>\n        <g id=\"Signature\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n            <path d=\"M211,227 C179.802278,282.921775 152.07339,326.186033 127.813335,356.792772 C103.55328,387.399511 66.2177324,426.221226 15.8066918,473.257919\" id=\"path-1\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M15.8066918,473.257919 C106.281582,397.607312 175.249222,344.023267 222.709613,312.505784 C270.170005,280.988302 337.1087,244.319707 423.525698,202.5\" id=\"path-2\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M423.525698,202.5 C442.984125,225.084586 422.300349,256.09479 361.474369,295.530613 C300.648389,334.966435 219.77107,365.484643 118.842411,387.085235\" id=\"path-3\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M118.842411,388.561225 C200.07994,386.593239 256.845487,386.593239 289.139053,388.561225 C315.19869,390.149313 360.786124,391.267592 394.451608,406.565923 C396.900631,407.678812 400.915589,411.278836 402.313677,413.984277 C403.424944,416.134691 403.647752,419.928606 402.982103,425.366023\" id=\"path-4\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M402.982103,425.366023 C397.076589,433.484211 388.351301,441.39232 376.806239,449.09035 C355.417373,463.352043 341.94589,472.209281 319.722473,480.911437 C287.112539,493.680704 246.546473,503.420268 223.90584,507.268043 C193.6057,512.417551 140.585986,516.432652 96.780435,507.268043 C77.2512419,503.182319 50.2599941,491.84561 15.8066918,473.257919\" id=\"path-5\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M15.8066918,473.257919 L683.5,290.5\" id=\"path-6\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M529.5,192.868017 L338.5,555.5\" id=\"path-7\" stroke={stroke} stroke-width=\"23\"></path>\n            <path d=\"M657.5,192.868017 L466.5,555.5\" id=\"path-8\" stroke={stroke} stroke-width=\"23\"></path>\n        </g>\n    </svg>\n  );\n}\n\nBHLogo.propTypes = {\n  className: PropTypes.string,\n  stroke: PropTypes.string,\n};\n\nBHLogo.defaultProps = {\n  className: undefined,\n  stroke: '#61dafb'\n};\n\nexport default BHLogo;\n","import React from 'react';\nimport BHLogo from './BHLogo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BHLogo className=\"App-logo\" />\n        <p>\n          <code>I am currently refactoring brian.hollingsworth.codes into a <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">React</a> app.<br></br>\n          In the meantime, have a gander at my resume's <a\n          className=\"App-link\"\n          href=\"https://github.com/brianHollingsworth/brian.hollingsworth.codes\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">original form</a>.</code>\n          </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}